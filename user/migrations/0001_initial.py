# Generated by Django 4.1.1 on 2024-05-01 12:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('course', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('first_name', models.CharField(max_length=50, verbose_name='Name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Surname')),
                ('avatar', models.ImageField(blank=True, max_length=10000, null=True, upload_to=user.models._get_upload_user_path, verbose_name='Avatar')),
                ('phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='Phone Number')),
                ('last_visit', models.DateTimeField(default='2000-01-01 00:00', verbose_name='Last Visit Date')),
                ('complete_day_time', models.DateTimeField(blank=True, null=True, verbose_name='Last date of exercise')),
                ('gender', models.CharField(choices=[('male', 'Man'), ('female', 'Woman'), ('non_binary', 'Non Binary')], default='male', max_length=50, verbose_name='Gender')),
                ('birthday', models.CharField(blank=True, max_length=50, null=True, verbose_name='Birth Date')),
                ('status', models.CharField(choices=[('admin', 'Администратор'), ('moderator', 'Модератор'), ('client', 'Клиент')], default='client', max_length=100, verbose_name='Status')),
                ('authorization_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Authorization code')),
                ('reset_password_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Reset Password code')),
                ('is_first_login', models.BooleanField(default=True, verbose_name='First Login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['id'],
            },
            managers=[
                ('objects', user.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('height', models.SmallIntegerField(default=180, verbose_name='Height')),
                ('weight', models.SmallIntegerField(default=70, verbose_name='Weight')),
                ('posture_side', models.CharField(choices=[('type_var', 'Varus'), ('type_val', 'Valgus'), ('type_nor', 'Normal')], default='type_1', max_length=100, verbose_name='Posture type from front side view')),
                ('posture_back', models.CharField(choices=[('type_s', 'Sway'), ('type_ns', 'No Sway')], default='type_s', max_length=100, verbose_name='Posture type from right side view')),
                ('current_day', models.SmallIntegerField(default=0, verbose_name='Current Day')),
                ('current_week', models.SmallIntegerField(default=0, verbose_name='Current Week')),
                ('in_archive', models.BooleanField(default=False, verbose_name='In Archive')),
                ('archive_date', models.DateTimeField(blank=True, null=True, verbose_name='Archiving date')),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'ordering': ['id'],
            },
            bases=('user.user',),
            managers=[
                ('objects', user.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClientWeek',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True)),
                ('is_available_for_client', models.BooleanField(default=False, verbose_name='Is Available')),
                ('complete_count', models.SmallIntegerField(default=0, verbose_name='Days Count')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_course_weeks', to='course.week')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_course_user', to='user.client')),
            ],
            options={
                'verbose_name': 'Exercise Week',
                'verbose_name_plural': 'Exercise Weeks',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ClientDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_num', models.IntegerField(default=0, verbose_name='#')),
                ('sets', models.IntegerField(default=0, verbose_name='Set Count')),
                ('repeats', models.IntegerField(default=0, verbose_name='Reps Count')),
                ('duration', models.IntegerField(default=0, verbose_name='Duration (sec)')),
                ('complete_count', models.SmallIntegerField(default=0)),
                ('repeat_count', models.SmallIntegerField(default=0)),
                ('exercise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='course.exercise')),
                ('week', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='user.clientweek')),
            ],
            options={
                'verbose_name': 'Exercise Day',
                'verbose_name_plural': 'Exercise Days',
                'ordering': ['order_num'],
            },
        ),
        migrations.CreateModel(
            name='ClientPosturePhotos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('left_side_image', models.ImageField(max_length=10000, upload_to=user.models._get_upload_client_path, verbose_name='Left Side Posture Photo')),
                ('top_side_image', models.ImageField(max_length=10000, upload_to=user.models._get_upload_client_path, verbose_name='Top Side Posture Photo')),
                ('right_side_image', models.ImageField(max_length=10000, upload_to=user.models._get_upload_client_path, verbose_name='Right Side Posture Photo')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.client', verbose_name='Client')),
            ],
            options={
                'verbose_name': 'Posture photo',
                'verbose_name_plural': 'Posture photos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClientCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general_condition_before', models.SmallIntegerField(blank=True, null=True, verbose_name='General condition before exercises')),
                ('general_condition_after', models.SmallIntegerField(blank=True, null=True, verbose_name='General condition after exercises')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.client', verbose_name='Client')),
            ],
            options={
                'verbose_name': 'Condition',
                'verbose_name_plural': 'Conditions',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ClientCompleteExerciseCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.SmallIntegerField(default=0)),
                ('date', models.DateField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.client', verbose_name='Client')),
            ],
        ),
    ]
